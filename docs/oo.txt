Paradigma de Programação Orientada a Objetos

CLASSE
Definição (modelo) de um objeto;
OBJETO
Instância de uma Classe, possui atributos e metódos;

QUATRO PILARES DA OO
ENCAPSULAMENTO
Capacidade de esconder suas propriedades e implementação;
ABSTRAÇÃO
Capacidade de selecionar dados e propriedades do que é proposto;
HERANÇA
Capacidade de herdar atritutos e metódos da Classe Pai. Reutilização de código.
POLIMORFISMO
Capacidade de implementar metodos e propriedades diferentes;

NAMESPACES
Agrupamento de Classes;

MODIFICADORES DE ACESSO
PUBLIC
Todas Classes acessam métodos e atributos;
PRIVATE
Somente dentro da mesma Classe acessam métodos e atributos;
PROTECTED
Somente dentro da mesma Classe ou onde são heradas acessam métodos e atributos;

MÉTODOS
GET
Obtem dados;
SET
Seta dados;

INTERFACES
Implementa somente métodos;
Possui assinatura dos métodos;
Não possui construtor;
Não possui propriedades;
Por convenção começam com a letra I;

CLASSES ABSTRATAS
Classe de referência, base para outras Classes;
Cria protótipos dos métodos, que são obrigatórios para quem herda esta Classe;
Não se pode instanciar seus objetos;

CLASSE SEALED
Não pode ser herdada;

MÉTODOS VIRTUAIS
Mesmo nome do método herdado da Classe Pai;
Sobrescreve o método declarado como virtual na classe pai e como override na classe filha.

STRUCT
Tipo que armazena tipos de dados diferentes;
Não pode ser herdada;
Pode possuir construtor;

SOBRECARGA DE MÉTODOS
Mesmo nome de método com argumentos diferentes;

SOLID
Single Responsability Principle (Princípio da Responsabilidade Única);
Classes e metodos responsaveis por executar uma unica função

Open/Closed Principle (Princípio do “Aberto para Extensão/Fechado para Implementação);
O princípio de aberto/fechado diz que as classes devem estar abertas para extensão, mas fechadas para modificação.

Liskov Substitution Principle (Princípio da Substituição de Liskov);
subclasses devem ser substituíveis por suas classes de base.
se a classe B for uma subclasse da classe A, 
devemos poder passar um objeto da classe B para qualquer método que espere um objeto da classe A 
e o método não deverá produzir resultados estranhos

Interface Segregation Principle (Princípio da Segregação de Interfaces);
Segregação quer dizer manter as coisas separadas. 
O princípio da segregação da interface tem a ver com separar as interfaces.
O princípio declara que muitas interfaces específicas do cliente são melhores que uma interface de propósito geral. 
Os clientes não devem ser forçados a implementar uma função que não necessitam.

Dependency Inversion Principle (Princípio da Inversão de Dependências)
O princípio da inversão da dependência declara que nossas classes devem depender de interfaces 
ou de classes abstratas em vez de classes concretas e de funções.
"Se o princípio de aberto/fechado declara o objetivo da arquitetura orientada a objetos, 
o princípio de inversão da dependência declara seu mecanismo principal".